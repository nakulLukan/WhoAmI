@using WhoAmI.Web.Interfaces
@inject NavigationManager NavigationManager
<style>

    nav {
        top: 0px;
        position: fixed;
        height: 100%;
        width: auto;
        z-index: 1;
    }

        nav div {
            height: 100%;
            overflow: hidden;
            background: #FFFDFD19;
            border-right: solid 2px;
            display: flex;
            flex-direction: column-reverse;
        }

        nav div img{
            margin-bottom: 40px;
            margin-left: -40px;
            z-index: 100;
            position: relative;
        }

    .nav-container {
        height: 100%;
        margin-left: auto;
        margin-right: auto;
        transition: width 0.5s;
    }

    .nav-container-none {
        width: 0%;
        margin-left: auto;
        margin-right: auto;
        transition: width 0.5s;
    }

    .nav-container-center {
        z-index: 1000;
        width: 50%;
        margin-left: auto;
        margin-right: auto;
        transition: width 0.5s;
    }

    .logo-3d {
        width: auto;
        height: 60px;
        cursor: grab;
        z-index: -1;
    }

    .logo-3d:active{
        cursor: grabbing;
    }

    nav div .logo {
        color: white;
        font-size: 35px;
        line-height: 80px;
        font-weight: bold;
        flex-direction: row-reverse
    }

    nav div ul {
        float: right;
        list-style: none;
        margin: 0px;
        display: list-item;
        padding-left: 0px;
    }

        nav div ul li {
            line-height: 60px;
            margin: 0 5px;
        }

            nav div ul li a {
                color: white;
                font-size: 17px;
                text-transform: uppercase;
                border-radius: 3px;
                padding: 7px 13px;
                text-decoration: none;
                cursor: pointer;
            }

    a.active, a:hover {
        transition: 0.5s;
        text-decoration: underline;
        text-underline-offset: 4px;
        color: white;
    }

    a.active {
        color: white;
        font-weight: bold;
    }
</style>
<nav class="d-none d-md-block">
    <div class=@navClass>
        <ul>
            <li>
                <NavLink href="" Match=@NavLinkMatch.All>Work</NavLink>
            </li>

            <li>
                <NavLink href="about">About</NavLink>
            </li>
        </ul>
    </div>
</nav>
@code {
    [Inject]
    IJSRuntime jsrunTime { get; set; }

    [Inject]
    IBrowserService browserService { get; set; }

    private const string NAV_CONTAINER_CLASS = "nav-container";
    private const string NAV_CONTAINER_CENTER_CLASS = "nav-container-center";
    private const string NAV_CONTAINER_NONE_CLASS = "nav-container-none";

    private string navClass = NAV_CONTAINER_CLASS;

    private int lastScrollTopValue = 0;
    private int lastShrinkScrollValue = 0;
    private int scrollValue = 0;
    private const int HOLD_SCROLL_LEVEL = 66;
    [JSInvokable]
    public async Task OnScroll()
    {
        var (bodyScrollTopTask, elementScrollTopTask) = (browserService.GetBodyScrollTop<double>(),
            browserService.GetElementScrollTop<double>());
        _ = await Task.WhenAll(bodyScrollTopTask, elementScrollTopTask);
        scrollValue = (int)Math.Max(bodyScrollTopTask.Result, elementScrollTopTask.Result);

        if ((scrollValue - lastShrinkScrollValue) > HOLD_SCROLL_LEVEL
            && lastScrollTopValue < scrollValue)
        {
            if (navClass != NAV_CONTAINER_NONE_CLASS)
            {
                navClass = NAV_CONTAINER_NONE_CLASS;
                StateHasChanged();
            }
        }
        else if (scrollValue < lastScrollTopValue
            && scrollValue > HOLD_SCROLL_LEVEL)
        {
            lastShrinkScrollValue = scrollValue;
            if (navClass != NAV_CONTAINER_CENTER_CLASS)
            {
                navClass = NAV_CONTAINER_CENTER_CLASS;
                StateHasChanged();
            }
        }
        else if (scrollValue < lastScrollTopValue)
        {
            lastShrinkScrollValue = scrollValue;
            if (navClass != NAV_CONTAINER_CLASS)
            {
                navClass = NAV_CONTAINER_CLASS;
                StateHasChanged();
            }
        }
        lastScrollTopValue = scrollValue;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var objRev = DotNetObjectReference.Create(this);
            await jsrunTime.InvokeVoidAsync("setOnScroll", objRev, nameof(OnScroll));
        }
    }
}
